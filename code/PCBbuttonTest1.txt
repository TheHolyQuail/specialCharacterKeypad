# libraries for display and pin control
import os
import time
import busio
import board
import displayio
import terminalio
import adafruit_displayio_ssd1306
import adafruit_imageload

# libraries for USB HID
import digitalio
import usb_hid
from adafruit_hid.keyboard import Keyboard
from adafruit_hid.keycode import Keycode
from adafruit_hid.keyboard_layout_us import KeyboardLayoutUS

# library for potentiometer
import analogio

### keyboard and button setup ##############################
# creating keyboard
Keyboard = Keyboard(usb_hid.devices)
Layout = KeyboardLayoutUS(Keyboard)

# declaring button pins
btn0_pin = board.GP15
btn1_pin = board.GP5
btn2_pin = board.GP4
btn3_pin = board.GP3
btn4_pin = board.GP2
btn5_pin = board.GP14
btn6_pin = board.GP13
btn7_pin = board.GP12
btn8_pin = board.GP11
btn9_pin = board.GP10

# setting pin settings
btn0 = digitalio.DigitalInOut(btn0_pin)
btn0.direction = digitalio.Direction.INPUT
btn0.pull = digitalio.Pull.UP

btn1 = digitalio.DigitalInOut(btn1_pin)
btn1.direction = digitalio.Direction.INPUT
btn1.pull = digitalio.Pull.UP

btn2 = digitalio.DigitalInOut(btn2_pin)
btn2.direction = digitalio.Direction.INPUT
btn2.pull = digitalio.Pull.UP

btn3 = digitalio.DigitalInOut(btn3_pin)
btn3.direction = digitalio.Direction.INPUT
btn3.pull = digitalio.Pull.UP

btn4 = digitalio.DigitalInOut(btn4_pin)
btn4.direction = digitalio.Direction.INPUT
btn4.pull = digitalio.Pull.UP

btn5 = digitalio.DigitalInOut(btn5_pin)
btn5.direction = digitalio.Direction.INPUT
btn5.pull = digitalio.Pull.UP

btn6 = digitalio.DigitalInOut(btn6_pin)
btn6.direction = digitalio.Direction.INPUT
btn6.pull = digitalio.Pull.UP

btn7 = digitalio.DigitalInOut(btn7_pin)
btn7.direction = digitalio.Direction.INPUT
btn7.pull = digitalio.Pull.UP

btn8 = digitalio.DigitalInOut(btn8_pin)
btn8.direction = digitalio.Direction.INPUT
btn8.pull = digitalio.Pull.UP

btn9 = digitalio.DigitalInOut(btn9_pin)
btn9.direction = digitalio.Direction.INPUT
btn9.pull = digitalio.Pull.UP

### potentiometer setup ####################################
pot = analogio.AnalogIn(board.GP26)

def get_voltage(pin):
    #return (pin.value * 3.3) / 65536
    return (pin.value)/100

### display setup ##########################################
WIDTH = 128
HEIGHT = 64
CENTER_X = int(WIDTH/2)
CENTER_Y = int(HEIGHT/2)

displayio.release_displays()

SDA = board.GP8
SCL = board.GP9
i2c = busio.I2C(SCL, SDA)

if(i2c.try_lock()):
    print("i2c.scan(): " + str(i2c.scan()))
    i2c.unlock()
print()

display_bus = displayio.I2CDisplay(i2c, device_address=60)
display = adafruit_displayio_ssd1306.SSD1306(display_bus, width=WIDTH, height=HEIGHT)

"""
“displayio” drivers will also work with CircuitPython to display error messages
and other output to the display when the user code is not using it.
"""
print("Raspberry Pi Pico/CircuitPython ")
print("SSD1306 displayio (adafruit_displayio_ssd1306)")
time.sleep(.5)

#print((get_voltage(pot)))
#time.sleep(.5)

#================================================
"""
bitmap1, palette = adafruit_imageload.load("/bitmaps/bitmapTest2.bmp",
                                         bitmap=displayio.Bitmap,
                                         palette=displayio.Palette)
bitmap2, palette = adafruit_imageload.load("/bitmaps/cp_sprite_sheet.bmp",
                                         bitmap=displayio.Bitmap,
                                         palette=displayio.Palette)
"""
# 0:, 1:, 2:, 3:, 4:, 5:, 6:, 7:, 8:, 9:
arrows, palette = adafruit_imageload.load("/bitmaps/arrows.bmp",
                                         bitmap=displayio.Bitmap,
                                         palette=displayio.Palette)

# 0:, 1:, 2:, 3:, 4:, 5:, 6:, 7:, 8:, 9:
logic1, palette = adafruit_imageload.load("/bitmaps/logicSymbols1.bmp",
                                         bitmap=displayio.Bitmap,
                                         palette=displayio.Palette)

# 0:, 1:, 2:, 3:, 4:, 5:, 6:, 7:, 8:, 9:
logic2, palette = adafruit_imageload.load("/bitmaps/logicSymbols2.bmp",
                                         bitmap=displayio.Bitmap,
                                         palette=displayio.Palette)

# 0:, 1:, 2:, 3:, 4:, 5:, 6:, 7:, 8:, 9:
mathOperators1, palette = adafruit_imageload.load("/bitmaps/mathCommonOperators1.bmp",
                                         bitmap=displayio.Bitmap,
                                         palette=displayio.Palette)

# 0:, 1:, 2:, 3:, 4:, 5:, 6:, 7:, 8:, 9:
mathSymbols1, palette = adafruit_imageload.load("/bitmaps/mathCommonSymbols1.bmp",
                                         bitmap=displayio.Bitmap,
                                         palette=displayio.Palette)

# 0:, 1:, 2:, 3:, 4:, 5:, 6:, 7:, 8:, 9:
mathSymbols2, palette = adafruit_imageload.load("/bitmaps/mathCommonSymbols2.bmp",
                                         bitmap=displayio.Bitmap,
                                         palette=displayio.Palette)

# Create a TileGrid to hold the bitmap
#tile_grid1 = displayio.TileGrid(bitmap1, pixel_shader=palette)
#tile_grid2 = displayio.TileGrid(bitmap2, pixel_shader=palette)

arrowsGrid = displayio.TileGrid(arrows, pixel_shader=palette)
logicGrid1 = displayio.TileGrid(logic1, pixel_shader=palette)
logicGrid2 = displayio.TileGrid(logic2, pixel_shader=palette)
mOperatorGrid = displayio.TileGrid(mathOperators1, pixel_shader=palette)
mSymbolGrid1 = displayio.TileGrid(mathSymbols1, pixel_shader=palette)
mSymbolGrid2 = displayio.TileGrid(mathSymbols2, pixel_shader=palette)

# Create a Group to hold the TileGrid
group = displayio.Group(max_size=5)

# Add the TileGrid to the Group
#group.append(tile_grid2)
group.append(arrowsGrid)

# Add the Group to the Display
display.show(group)

# Loop forever so you can enjoy your image
while True:
    time.sleep(0.1)
    if not btn0.value:
        # type "aa"
        Keyboard.press(Keycode.A)
        time.sleep(0.1)
        Keyboard.release(Keycode.A)
        time.sleep(0.1)
        Keyboard.press(Keycode.A)
        time.sleep(0.1)
        Keyboard.release(Keycode.A)
        
    if not btn1.value:
        # type "a"
        Keyboard.press(Keycode.A)
        time.sleep(0.1)
        Keyboard.release(Keycode.A)
        # change display to bitmap one
        group.pop(0)
        group.append(logicGrid1)
        display.show(group)
        #print((get_voltage(pot)))
        
    if not btn2.value:
        # type "∞"
        Keyboard.press(Keycode.ALT, Keycode.KEYPAD_TWO, Keycode.KEYPAD_THREE, Keycode.KEYPAD_SIX)
        time.sleep(0.1)
        Keyboard.release(Keycode.ALT, Keycode.KEYPAD_TWO, Keycode.KEYPAD_THREE, Keycode.KEYPAD_SIX)
        
        # change display to bitmap two
        group.pop(0)
        group.append(logicGrid2)
        display.show(group)
        
    if not btn3.value:
        # type "b"
        Keyboard.press(Keycode.B)
        time.sleep(0.1)
        Keyboard.release(Keycode.B)
        
    if not btn4.value:
        # type "c"
        Keyboard.press(Keycode.C)
        time.sleep(0.1)
        Keyboard.release(Keycode.C)
        
    if not btn5.value:
        # type "d"
        Keyboard.press(Keycode.D)
        time.sleep(0.1)
        Keyboard.release(Keycode.D)
        
    if not btn6.value:
        # type "e"
        Keyboard.press(Keycode.E)
        time.sleep(0.1)
        Keyboard.release(Keycode.E)
        
    if not btn7.value:
        # type "f"
        Keyboard.press(Keycode.F)
        time.sleep(0.1)
        Keyboard.release(Keycode.F)
        
    if not btn8.value:
        # type "g"
        Keyboard.press(Keycode.G)
        time.sleep(0.1)
        Keyboard.release(Keycode.G)
        
    if not btn9.value:
        # type "h"
        Keyboard.press(Keycode.H)
        time.sleep(0.1)
        Keyboard.release(Keycode.H)

